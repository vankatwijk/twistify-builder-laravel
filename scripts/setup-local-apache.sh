#!/bin/bash

# Setup script for local Apache development with Instasites
# This script helps configure Apache for local development

set -e

echo "🚀 Setting up Apache for Instasites local development"
echo "=================================================="

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   echo "❌ This script should not be run as root"
   echo "   Run it as your regular user, it will use sudo when needed"
   exit 1
fi

# Check if Apache is installed
if ! command -v apache2 &> /dev/null; then
    echo "❌ Apache2 is not installed"
    echo "   Install it with: sudo apt update && sudo apt install apache2"
    exit 1
fi

# Check if Apache is running
if ! systemctl is-active --quiet apache2; then
    echo "⚠️  Apache2 is not running, starting it..."
    sudo systemctl start apache2
    sudo systemctl enable apache2
fi

# Get the current user and group
USER_NAME=$(whoami)
USER_GROUP=$(id -gn)

echo "👤 Current user: $USER_NAME:$USER_GROUP"

# Create sites directory structure
SITES_ROOT="/var/www/html/sites"
echo "📁 Creating sites directory: $SITES_ROOT"

sudo mkdir -p "$SITES_ROOT"
sudo chown -R "$USER_NAME:$USER_GROUP" "$SITES_ROOT"
sudo chmod -R 755 "$SITES_ROOT"

# Enable required Apache modules
echo "🔧 Enabling required Apache modules..."
sudo a2enmod rewrite
sudo a2enmod headers
sudo a2enmod expires

# Create a basic .htaccess template for generated sites
echo "📝 Creating .htaccess template..."
cat > /tmp/htaccess-template << 'EOF'
# Generated by Instasites
RewriteEngine On

# Handle missing files gracefully - fallback to index.html
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ /index.html [L]

# Security headers
Header always set X-Content-Type-Options nosniff
Header always set X-Frame-Options DENY
Header always set X-XSS-Protection "1; mode=block"

# Cache static assets
<FilesMatch "\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$">
    ExpiresActive On
    ExpiresDefault "access plus 1 month"
    Header append Cache-Control "public"
</FilesMatch>
EOF

sudo cp /tmp/htaccess-template "$SITES_ROOT/.htaccess-template"
sudo chown "$USER_NAME:$USER_GROUP" "$SITES_ROOT/.htaccess-template"
rm /tmp/htaccess-template

# Update Laravel .env file
ENV_FILE="$(dirname "$0")/../.env"
if [[ -f "$ENV_FILE" ]]; then
    echo "⚙️  Updating Laravel .env file..."
    
    # Update SITES_ROOT
    if grep -q "^SITES_ROOT=" "$ENV_FILE"; then
        sed -i "s|^SITES_ROOT=.*|SITES_ROOT=$SITES_ROOT|" "$ENV_FILE"
    else
        echo "SITES_ROOT=$SITES_ROOT" >> "$ENV_FILE"
    fi
    
    # Update Apache paths
    if grep -q "^APACHE_SITES_AVAILABLE=" "$ENV_FILE"; then
        sed -i "s|^APACHE_SITES_AVAILABLE=.*|APACHE_SITES_AVAILABLE=/etc/apache2/sites-available|" "$ENV_FILE"
    else
        echo "APACHE_SITES_AVAILABLE=/etc/apache2/sites-available" >> "$ENV_FILE"
    fi
    
    if grep -q "^APACHE_SITES_ENABLED=" "$ENV_FILE"; then
        sed -i "s|^APACHE_SITES_ENABLED=.*|APACHE_SITES_ENABLED=/etc/apache2/sites-enabled|" "$ENV_FILE"
    else
        echo "APACHE_SITES_ENABLED=/etc/apache2/sites-enabled" >> "$ENV_FILE"
    fi
    
    echo "✅ Updated .env file with Apache configuration"
else
    echo "⚠️  .env file not found at $ENV_FILE"
    echo "   Make sure to copy .env.example to .env and configure it"
fi

# Test Apache configuration
echo "🧪 Testing Apache configuration..."
if sudo apache2ctl configtest; then
    echo "✅ Apache configuration is valid"
else
    echo "❌ Apache configuration has errors"
    exit 1
fi

# Reload Apache
echo "🔄 Reloading Apache..."
sudo systemctl reload apache2

echo ""
echo "✅ Setup complete!"
echo ""
echo "📋 Next steps:"
echo "   1. Make sure your Laravel .env file is properly configured"
echo "   2. Run: php artisan serve (for the API)"
echo "   3. Test the API: curl http://localhost:8000/api/health"
echo "   4. Create a test site with the /api/build endpoint"
echo ""
echo "🌐 Generated sites will be available at:"
echo "   http://your-hostname.localhost (after building)"
echo ""
echo "🔧 Manage Apache sites with:"
echo "   php artisan apache:manage list"
echo "   php artisan apache:manage enable your-hostname"
echo "   php artisan apache:manage disable your-hostname"
echo ""
echo "📁 Sites directory: $SITES_ROOT"
echo "🗂️  Apache configs: /etc/apache2/sites-available/"
